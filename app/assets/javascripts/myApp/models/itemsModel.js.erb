/**
* myApp.models.items Module
*
* Description
*/
angular.module('models.items', [])
	.service('ItemsModel', ['$http', '$q', function($http, $q){
		var model = this,
				URLS = {
					GET: "/v1/items"
				},
				items = {},
				currentItem;
		
		function extract(result) {
			return result.data.items;
		}

		function cacheItems(result) {
			angular.forEach(extract(result), addItem);
			return items;
		}

		function extractDetailed(result) {
			return result.data;
		}

		function cacheDetailedItem(result) {
			return addItem(extractDetailed(result));
		}

		function addItem(item) {
			if (item.item_id) {
				if(itemExist(item)) {
					angular.extend(items[item.item_id], item);	
				} else {
					items[item.item_id] = item;
				}
				return item;
			}
		}

		function itemExist(item) {
			return items[item.item_id] ? true : false;
		}

    function showError() {
      console.log("an error has occurred: ")
    }

    model.setCurrentItem = function(itemKey) {
    	return model.asyncGetItemByKey(itemKey).then(function(item){
    		currentItem = item;
    	});
    };

    model.resetCurrentItem = function() {
    	return currentItem = undefined;
    };

    function getItemImage(itemKey) {
    	return model.asyncGetItemByKey(itemKey).then(function(item){
    		return item.image.full;
    	});
    }

		model.getItems = function() {
			return $http.get(URLS.GET, {cache: true}).then(cacheItems, showError);
		};

		model.getItem = function(key) {
			return $http.get((URLS.GET + "/" + key), {cache: true}).then(cacheDetailedItem);
		};

		model.asyncGetItemByKey = function(itemKey) {
			return $q(function(resolve, reject){
				setTimeout(function() {
					function findItem(key) {
						// loop over items and return item that matches or nil
            return _.find(items, function(item) {
              return item.item_id == key;
            });
					}
					if(items) {
						resolve(findItem(itemKey)); 
					} else {
						model.getItems()
							.then(function() {
								resolve(findItem(itemKey));
							});
					}
				}, 0);
			});
		};

		model.getCurrentItem = function() {
    	return currentItem;
    };

    model.getCurrentItemImage = function() {
    	return currentItem ? currentItem.image.full : '';
    };

		model.getItemImage = function(item) {
			return item ? item.image.full : '';
		};

		model.getItemSprite = function(item) {
			return typeof(item) != 'undefined' ? item.image.sprite : '';
		};

		model.getItemId = function(item) {
    	return item ? item.item_id : '';
    };

    model.getItemName = function(item) {
    	return typeof(item) != 'undefined' ? item.name : '';
    };

    model.getItemDescription = function(item) {
    	return typeof(item) != 'undefined' ? item.description : '';
    };

    model.getItemGoldCost = function(item) {
    	return item ? item.total_gold : '';
    };

    model.testgetItemSpriteStyle = function(item) {
    	debugger
    	console.log("item is " + typeof(item));
    	console.log(model.getItemSpriteStyle(item));
    	return model.getItemSpriteStyle(item);
    }

    model.getItemSpriteStyle = function(item) {
    	if (item) {
	    	return {
	    		"background-image": 'url(' + model.getItemSprite(item) +')',
	    		'background-position': '-' + item.image.x + 'px ' + '-' + item.image.y + 'px',
	    		'width': item.image.w + 'px',
	    		'height': item.image.h + 'px'
	    	};
	    } 
    };

    model.getItemStats = function(item) {
  		return item ? item.stats : {};
    }
	}])
;