/**
* myApp.models.champions Module
*
* Description
*/
angular.module('models.champions', [])
	.service('ChampionsModel', ['$http', '$q', function($http, $q){
		var model = this,
				URLS = {
					GET: "/v1/champions",
				},
				champions = {},
				currentChampion;

		console.log('ChampionsModel has been called');
		
		function capitalize(value) {
			// TODO take this out to a helper function or completely
			var words = value.split(" ");
			words = angular.forEach(words, function(word, idx) {
				words[idx] = word[0].toUpperCase() + word.substring(1);
			});

			return words.join(" ");
		}

		model.getCleanLowerCaseName = function(dirtyName) {
			var cleanName = dirtyName.replace(/'\./, '')
			return cleanName[0].toUpperCase() + cleanName.substring(1).toLowerCase();
		};

		function extract(result) {
			return result.data.champions;
		}

		function cacheChampions(result) {
			angular.forEach(extract(result), addChampion);
			return champions;
		}

		function extractDetailed(result) {
			return result.data
		}

		function cacheDetailedChampion(result) {
			return addChampion(extractDetailed(result));
		}

		function addChampion(champion) {
			if (champion.champion_id) {
				if(championExist(champion)) {
					angular.extend(champions[champion.champion_id], champion);	
				} else {
					champions[champion.champion_id] = champion;
				}
				return champion;
			}
		}

		function championExist(champion) {
			return champions[champion.champion_id] ? true : false;
		}

    function showError() {
      console.log("an error has occurred: ")
    }

    model.setCurrentChampion = function(championKey) {
    	championKey = capitalize(championKey);
    	return model.asyncGetChampionByCleanName(championKey).then(function(champion){
    		currentChampion = champion;
    	});
    }

    // no longer called, perhaps I'll have a use for it later
    // Parent view resolve and child resolve race condition
    // currently currentChampion only gets changed never removed
    
    // model.resetCurrentChampion = function() {
    // 	return currentChampion = undefined;
    // };

    function getChampionImage(championKey) {
    	model.asyncGetChampionByCleanName(championKey).then(function(champion) {
    		return champion.image.full;
    	});
    }

    function getChampionSplash(championKey) {
    	model.asyncGetDetailedChampionByName(championKey).then(function(champion) {
    		return champion.splash.path;
    	})
    }

		model.getChampions = function() {
			return $http.get(URLS.GET, {cache: true}).then(cacheChampions);
			// return (champions) ? $q.when(champions) : $http.get(URLS.GET).then(cacheChampions, showError);
		}

		model.getChampion = function(key) {
			key = capitalize(key);
			return $http.get((URLS.GET + "/" + key), {cache: true}).then(cacheDetailedChampion);
		// 	return (champions) ? $q.when(champions) : $http.get(URLS.GET + "/" + key).then(cacheChampions, showError);
		}


		model.asyncGetDetailedChampionByName = function(championName) {
			return $q(function(resolve, reject){
				setTimeout(function() {
					function findChampion(name) {
						// loop over champions and return champion that matches or nil
            return _.find(champions, function(champion) {
              return champion.name == name;
            });
					}
					model.getChampion(championName)
						.then(function() {
							resolve(findChampion(championName));
						});
				}, 0);
			});
		};

		model.asyncGetChampionByCleanName = function(championName) {
			return $q(function(resolve, reject){
				setTimeout(function() {
					function findChampion(name) {
						// loop over champions and return champion that matches or nil
            return _.find(champions, function(champion) {
              return champion.name == name;
            });
					}
					if(champions) {
						resolve(findChampion(championName)); 
					} else {
						model.getChampions()
							.then(function() {
								resolve(findChampion(championName));
							});
					}
				}, 0);
			});
		};

		model.getCurrentChampion = function() {
    	return currentChampion;
    };

    model.getCurrentChampionImage = function() {
    	return currentChampion ? currentChampion.image.full : '';
    };

		model.getChampionImage = function(champion) {
			return champion ? champion.image.full : '';
		};

		model.getChampionSplash = function(champion) {
			return champion.splash ? champion.splash.path : '';
		};

		model.getChampionSprite = function(champion) {
			return champion ? champion.image.sprite : '';
		};

		model.getChampionId = function(champion) {
    	return champion ? champion.champion_id : '';
    };

    model.getChampionName = function(champion) {
    	return champion ? champion.name : '';
    };

    model.getChampionCleanName = function(champion) {
    	return champion ? champion.clean_name : '';
    };

    model.getChampionKey = function (champion) {
    	return champion ? champion.champion_id : '';
    };

    model.getChampionTitle = function(champion) {
    	return champion ? champion.title : '';
    };

    model.getChampionLore = function(champion) {
    	return champion ? champion.lore : '';
    };

    model.getChampionBlurb = function(champion) {
    	return champion ? champion.blurb : '';
    };

    model.getChampionAllyTips = function(champion) {
    	return champion ? champion.allytips : '';
    };

    model.getChampionTags = function(champion) {
    	return champion ? champion.tags : '';
    };

    model.getChampionResourceType = function(champion) {
    	return champion ? champion.resource_type : '';
    };

    model.getChampionEnemyTips = function(champion) {
    	return champion ? champion.enemytips : '';
    };

    model.getChampionStatsHtml = function(champion) {
    	return "<table class='championStatsDisplay'>" + 
    	"<tr>" +
	    	"<td class='statsData'>" +
		    	"<span class='hpDisplay'> HP: " + champion.hp + "<span class='hpPLDisplay'> (" + champion.hp_per_level + ")</span></span>" +
	    	"</td>" +
	    	"<td class='statsData'>" +
					"<span class='attackDmgDisplay'> Attack Damage: " + champion.attackdamage.toFixed(2) + "<span class='attackDmgPLDisplay'> (" + champion.attackdamage_per_level.toFixed(2) + ")</span></span>" +
				"</td>" +
			"</tr>" +
			"<tr>" +
	    	"<td class='statsData'>" +
					"<span class='hpRegenDisplay'> HP Regen: " + champion.hpregen + " <span class='hpRegenPLDisplay'> (" + champion.hpregen_per_level + ")</span></span>" +
				"</td>" +
	    	"<td class='statsData'>" +
					"<span class='attackSpeedDisplay'> Attack Speed: " + (.625 / (1 + champion.attackspeedoffset)).toFixed(3) + "<span class='attackSpeedPLDisplay'> (" + champion.attackspeed_per_level + "%)</span></span>" +
				"</td>" +
			"</tr>" +
			"<tr>" +
	    	"<td class='statsData'>" +
					"<span class='mpDisplay'> MP: " + champion.mp + "<span class='mpPLDisplay'> (" + champion.mp_per_level + ")</span></span>" +
	    	"</td>" +
	    	"<td class='statsData'>" +
					"<span class='armorDisplay'> Armor: " + champion.armor + "<span class='armorPLDisplay'> (" + champion.armor_per_level + ")</span></span>" +
				"</td>" +
			"</tr>" +
			"<tr>" +
	    	"<td class='statsData'>" +
					"<span class='mpRegenDisplay'> MP Regen: " + champion.mpregen + "<span class='mpRegenPLDisplay'> (" + champion.mpregen_per_level + ")</span></span>" +
	    	"</td>" +
	    	"<td class='statsData'>" +
					"<span class='magicResistDisplay'> Magic Resist: " + champion.spellblock + "<span class='magicResistPLDisplay'> (" + champion.spellblock_per_level + ")</span></span>" +
				"</td>" +
			"</tr>" +
			"<tr>" +
	    	"<td class='statsData'>" +
					"<span class='rangeDisplay'> Attack Range: " + champion.attackrange + "</span>" +
	    	"</td>" +
	    	"<td class='statsData'>" +
					"<span class='moveSpeedDisplay'> Movespeed: " + champion.movespeed + "</span>" +
				"</td>" +
			"</tr>" +
			"</table><br>"
    };

    model.getChampionStats = function(champion) {
    	return { 
	       'hp': 											champion.hp,
	       'hp_per_level': 						champion.hp_per_level,
	       'mp': 											champion.mp,
	       'mp_per_level': 						champion.mp_per_level,
	       'movespeed': 							champion.movespeed,
	       'armor': 									champion.armor,
	       'armor_per_level': 				champion.armor_per_level,
	       'spellblock': 							champion.spellblock,
	       'spellblock_per_level': 		champion.spellblock_per_level,
	       'attackrange': 						champion.attackrange,
	       'hpregen': 								champion.hpregen,
	       'hpregen_per_level': 			champion.hpregen_per_level,
	       'mpregen': 								champion.mpregen,
	       'mpregen_per_level': 			champion.mpregen_per_level,
	       'crit': 										champion.crit,
	       'crit_per_level': 					champion.crit_per_level,
	       'attackdamage': 						champion.attackdamage,
	       'attackdamage_per_level': 	champion.attackdamage_per_level,
	       'attackspeedoffset': 			champion.attackspeedoffset,
	       'attackspeed_per_level': 	champion.attackspeed_per_level
    	};
    };

    model.getChampionSpriteStyle = function(champion) {
    	return {
    		'background-image': 'url(' + model.getChampionSprite(champion) +')',
    		'background-position': '-' + champion.image.x + 'px ' + '-' + champion.image.y + 'px',
    		'width': champion.image.w + 'px',
    		'height': champion.image.h + 'px'
    	};
    };
	}])
;