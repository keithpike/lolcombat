<div ui-view='navbar'>
	<span>placeholder navbar for index</span>
</div>

<div class='mainView' ui-view>
	<div>
		<pre>
		<h4 class='wordWrap'>
      Hello and welcome to the LOL champion combat simulator!
      
      As you can tell I'm a design freak(perhaps sarcasm on the internet is a bad idea), but don't let that deter you!
      If you're looking for the meat of the site go to the Calculator tab, it's ORANGE!

      Don't you fret about the current lack of statistics plenty more are up and coming...when I get to it.
      If you're interested you can read the todo list below! Todo lists are exciting!
		</h4>

		Below is a giant todo list in regard to the website:
		  
		  - Get abilities working!
		    - Parse Riot Api for ability effects
		    - Parse Riot Api for ability resource costs (there are 25 types?!)
		    - Parse Riot Api for ability coefficients
		    - Write custom handling for abilities
		    - Get information on animation timing / animation timing modifiers
		    - Inject effect values into Riot Api Tooltip return for display
		  
		  - Get items completely working!
		    - Parse Riot Api for item effects (these sometimes include things I would imagine are stats...like hp regen)
		    - Create custom logic for handling specific items

		  - Get runes working!
		    - Look into requirements for getting runes working

		  - Get Masteries working!
		    - Write custom logic for handling specific masteries

		  - Implement ItemRuneMasteries selector
		    - Have three tabs Items/Runes/Masteries
		    - Animate view up over championComparison forms
		    - On exit of view animate view down into tabs below
			  - Implement ItemSelector view
			    - Create item search functionality
			    - Make view similar to Riot's in game item selection
			      - Add championComparison form to right side of screen
			      - Add itemSelector to left side of screen
			  - Implement RuneSelector view
			    - Make view similar to Riot's in game rune pages
			      - Create template
			      - Create model
			  - Implement Masteries Selection View
			    - Make view similar to Riot's in game mastery selector page
			      - Create template
			      - Create model
			      - Implement custom logic for masteries

		  - Implement serializer / deserializer for championComparison setup
		    - Add custom URL for specific comparison setups
		    - Serialize on user request and display link
		    - Deserialize on navigation to link

		  - Implement DpsCalculation service features
		    - Calculate raw(before resist) on top of modified damage
		    - Handle abilities / item effects
		    - Calculate critical strike ability statistics
		      - Calculate average damage
		      - Calculate minimum damage
		      - Calculate maximum damage
		      - Calculate +/- 1 standard deviation (for average range indicator)
		    - Implement Debuff application handler
		    - Implement DropOff handler
		    - Implement Death event
		    - Implement Death handler
		    - Implement Buff application handler
		    - Implement endCast event (instead of assuming all cast animations are .2 seconds)
		    - Implement endCast handler
		    - Implement startCast handler
		    - Implement ability resource usage
		    - Implement Buff/Debuff Removal event
		    - Implement Buff/Debuff Removal handler
		    - Implement movement considerations (low priority, will require some design change)
		    - Plenty of other things I'm not thinking of at the moment

		  - Refactor DpsCalculation service
		    - Change over to OO design (Current design is more work to maintain/modify)
		    - Change events to include calculated damage at time of result instead of creating path then calculating (why work twice?)
		    - Move stat calculation features to seperate module

		  - Modify DpsCalculator Forms
		    - Incorporate drilldown on charts
		      - Switch to ngHighcharts
		      - Allow for zooming functionality on highcharts
		      - Add back to standard zoom button
		      - Add Drilldown to include champion info at time of event
		        - Spells / items with cooldown timer indicators
		        - Buff / Debuff icons
		        - Current HP / Resources
		        - Character portrait
		    - Modify ChampionLevel data binding (provide direct value?)
		    - Add relevant data to output of DpsCalculator forms
		      - Damage/sec
		      - Highest damage ability (damage dealt)
		      - Lowest damage ability (damage dealt)
		      - Highest DPS interval (damage dealt and timeframe)
		      - Raw damage calculation toggle for each relevant output
		      - Largest possible critical strike (average critical strike)
		      - General information about stats (ability power, armor, etc)
		      - Add range indicator for crittable abilities
		      - Add input for ability level order
		      - Add checkbox to manually choose ability levels

		  - Modify Controller connections (create standardized interfaces for models)
		    - Move view/model function connections to service
		    - Require model connection services in controllers
		    - They say modularity is a good thing...

		  - Reduce client side caching (currently setup for me being cheap)
		    - set timeout for client side caching

		  - Implement Redis caching for backend

		  - Implement selection of new champion without user explicitly removing existing selected champion
		  
		  - Implement tooltips for items in championComparison forms

		  - Consider using some of the many helper angular modules (i'm looking at you ngHighcharts)
		  
		  - Implement horizontal scrolling for touch screens
		  
		  - Implement update routine for patch changes
		    - Update existing champions / items / runes / masteries / images with newer information
		    - Add new champions / items / runes / masteries / images to database
		    - Consider using AWS api to upload images depending on DataDragon's consistancy with images
		    - Invalidate Redis cache values on update (once Redis implemented)
		    - Warm up cache after update
		    - Consider using socketIO to push live update information to clients

		  - Style style style!...profit?
		    - Make style sheets more generic



		Known Bugs:

		  - Javascript

		    - Clicking on a graph will cause an error

		  - Chrome

		    - If second champion form field is removed while first champion form field is in the middle of exit animation it leaves behind portion of image for the duration of first champion form animation
		  
		  - Safari

		    - Transition on form creation only fades in but does not slide (form destruction functions as intended)

		  - IE

		    - Leaving space here for the certainty that it will need to be filled


		</pre>

	</div>
</div>

<footer ui-view='footer' class='footer'>
	placeholder footer for index
</footer>
