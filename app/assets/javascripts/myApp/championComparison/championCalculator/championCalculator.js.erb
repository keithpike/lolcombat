/**
* championComparison Module
*
* Description
*/

angular.module('championCalculator', [
	'models.items',
	'models.champions',
	'models.championComparisons',
	'ngOrderObjectBy',
	'services.championDpsCalculator'
])
	.config(function($stateProvider){
		$stateProvider
			.state('appStart.comparison.calculator', {
				url: '/calculator',
				views: {
				 	'championComparison': {
				 		templateUrl: "<%= asset_path('myApp/championComparison/championCalculator/championComparison.html') %>",
				 		controller: "ChampionComparisonController as championComparisonController"
				 	},

				 	'championSelector': {
				 		templateUrl: "<%= asset_path('myApp/championComparison/championCalculator/championSelector.html') %>",
				 		controller: "ChampionSelectorController as championSelectorController",
				 	},

				 	'itemsRunesMasteriesSelector': {
						templateUrl: "<%= asset_path('myApp/championComparison/championCalculator/itemSelector.html') %>",
				 		controller: "ItemSelectorController as itemSelectorController",
				 	}
				},
		 		resolve: {
		 			items: function(ItemsModel) {
		 				return ItemsModel.getItems();
		 			},
		 			champions: function(ChampionsModel) {
		 				return ChampionsModel.getChampions();
		 			}
		 		}
			});
	})
	.directive('hulChampionComparison', [function() {
		// console.log("woohoo a directive!");
		//return function(){
			return {
				scope: {
					comparisonIndex: '@',
					getComparisonBackgroundStyle: '&',
					getComparisonItems: '&',
					getComparisonItemClass: '&',
					getSpriteStyle: '&',
					removeItem: '&',
					removeComparison: '&',
					selectComparison: '&',
					test: '&'
				},
				link: function(scope, element, attr) {
					//
				},
				restrict: 'AE',
				templateUrl: "<%= asset_path('myApp/championComparison/championCalculator/championCalculatorForm.html') %>",
				// transclude: true
			};

		//};
	}])
	.directive('onLastRepeat', function() {

    return function(scope, element, attrs) {
      if (scope.$last) setTimeout(function(){
	      var wrapper = element.parent()[0];
				// var wrapper = document.getElementById('championSelectorContainer');
				myScroll = new IScroll(wrapper, {
					scrollX: true,
					scrollY: false,
					mouseWheel: true,
					scrollbars: true
				});
				console.log('i was called');
      }, 5);
    };
  })

	.controller('ChampionComparisonController', ['ChampionComparisonModel', 'ItemsModel', 'ChampionsModel', 'ChampionDpsCalculator', function championComparisonController(ChampionComparisonModel, ItemsModel, ChampionsModel, ChampionDpsCalculator){
		var championComparisonController = this;

		championComparisonController.alert = function(someText) {
			alert(someText);
		}		
		championComparisonController.test = ChampionDpsCalculator.test;

		championComparisonController.comparisonFilled = ChampionComparisonModel.comparisonFilled;
		championComparisonController.selectComparison = ChampionComparisonModel.selectComparison;
		championComparisonController.getComparisonItems = ChampionComparisonModel.getComparisonItems;
		championComparisonController.getComparisonItemClass = ChampionComparisonModel.getComparisonItemClass;
		championComparisonController.removeItem = ChampionComparisonModel.removeItem;
		championComparisonController.getName = ItemsModel.getItemName;
		championComparisonController.getDescription = ItemsModel.getItemDescription;
		championComparisonController.getSpriteStyle = ItemsModel.getItemSpriteStyle; 
		championComparisonController.getComparisonChampionByIndex = ChampionComparisonModel.getComparisonChampionByIndex;
		championComparisonController.getComparisonBackgroundStyle = ChampionComparisonModel.getComparisonBackgroundStyle;
		championComparisonController.getChampionSplash = ChampionsModel.getChampionSplash;
		championComparisonController.checkComparisonSelected = ChampionComparisonModel.shouldBeDimmed;
		championComparisonController.calculateDps = ChampionComparisonModel.calculateDpsInfo;
		championComparisonController.deselectChampion = ChampionComparisonModel.resetChampionComparison;
	}])

	.controller('ItemSelectorController', ['items', 'ItemsModel', 'ChampionComparisonModel', function itemSelectorController(items, ItemsModel, ChampionComparisonModel){
		var itemSelectorController = this;
		
		itemSelectorController.itemsData = items;
		itemSelectorController.getName = ItemsModel.getItemName;
		itemSelectorController.getDescription = ItemsModel.getItemDescription;
		itemSelectorController.getSpriteStyle = ItemsModel.getItemSpriteStyle;
		itemSelectorController.selectItem = function(item) {
			ItemsModel.getItem(ItemsModel.getItemId(item));
			ChampionComparisonModel.selectItem(item);
		}
	}])

	.controller('RuneSelectorController', [function runeSelectorController(){
		var runeSelectorController = this;
	}])

	.controller('MasterySelectorController', [function masterySelectorController(){
		var masterySelectorController = this;
	}])

	.controller('ChampionSelectorController', ['champions', 'ChampionsModel', 'ChampionComparisonModel', '$scope', function championSelectorController(champions, ChampionsModel, ChampionComparisonModel, $scope){
		var championSelectorController = this;
		// championSelectorController.handleClick = ChampionComparisonModel.testAddItem;//function(champion){
		// 	debugger
		// 	console.log(champion.name + " has been clicked");
		// };
		// ChampionSelectorController.comparisonOneItems

		championSelectorController.championsData = champions;
		championSelectorController.checkSelected = ChampionComparisonModel.checkSelected;
		//championSelectorController.getComparisonOneItems = ChampionComparisonModel.getComparisonItems(0);
		championSelectorController.getImage = ChampionsModel.getChampionImage;
		championSelectorController.getName = ChampionsModel.getChampionName;
		championSelectorController.getTitle = ChampionsModel.getChampionTitle;
		championSelectorController.getSpriteStyle = ChampionsModel.getChampionSpriteStyle;
		championSelectorController.selectChampion = function(champion) {
			ChampionsModel.getChampion(ChampionsModel.getChampionName(champion));
			ChampionComparisonModel.championSelected(champion);
		};
		// var init = function (scope, element, attrs) {
		// 	// var wrapper = element.parent()[0];
		// 	debugger
		// 	// var wrapper = document.getElementById('championSelectorContainer');
		// 	myScroll = new IScroll('#championSelectorContainer', {
		// 		scrollX: true,
		// 		scrollY: false,
		// 		mouseWheel: true,
		// 		scrollbars: true
		// 	});
		// 	console.log('im called');
		// };
		// // init();
		// $scope.$on('onRepeatLast', init);
	}])
;



