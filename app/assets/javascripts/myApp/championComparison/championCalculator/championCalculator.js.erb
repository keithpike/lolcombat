/**
* championComparison Module
*
* Description
*/

angular.module('championCalculator', [
	'models.items',
	'models.champions',
	'models.championComparisons',
	'ngOrderObjectBy',
	'services.championDpsCalculator'
])
	.config(['$stateProvider', function($stateProvider){
		$stateProvider
			.state('appStart.comparison.calculator', {
				url: '/calculator',
				views: {
				 	'championComparison': {
				 		templateUrl: "<%= asset_path('myApp/championComparison/championCalculator/championComparison.html') %>",
				 		controller: "ChampionComparisonController as championComparisonController"
				 	},

				 	'championSelector': {
				 		templateUrl: "<%= asset_path('myApp/championComparison/championCalculator/championSelector.html') %>",
				 		controller: "ChampionSelectorController as championSelectorController",
				 	},

				 	'itemsRunesMasteriesSelector': {
						templateUrl: "<%= asset_path('myApp/championComparison/championCalculator/itemSelector.html') %>",
				 		controller: "ItemSelectorController as itemSelectorController",
				 	}
				},
		 		resolve: {
		 			items: ['ItemsModel', function(ItemsModel) {
		 				return ItemsModel.getItems();
		 			}],
		 			champions: ['ChampionsModel', function(ChampionsModel) {
		 				return ChampionsModel.getChampions();
		 			}]
		 		}
			});
	}])
	.directive('hulChampionComparison', [function() {
		// console.log("woohoo a directive!");
		//return function(){
			return {
				scope: {
					championLevel: '&',
					comparisonIndex: '@',
					getChampionLevel: '&',
					getComparisonBackgroundStyle: '&',
					getComparisonItems: '&',
					getComparisonItemClass: '&',
					getSpriteStyle: '&',
					getTimeframe: '&',
					removeItem: '&',
					removeComparison: '&',
					selectComparison: '&',
					setChampionLevel: '&',
					setTimeframe: '&',
					test: '&',
					timeframe: '=',
				},
				link: function(scope, element, attr) {
					//
				},
				restrict: 'AE',
				templateUrl: "<%= asset_path('myApp/championComparison/championCalculator/championCalculatorForm.html') %>",
				// transclude: true
			};

		//};
	}])

	.controller('ChampionComparisonController', ['ChampionComparisonModel', 'ItemsModel', 'ChampionsModel', 'ChampionDpsCalculator', '$scope', function championComparisonController(ChampionComparisonModel, ItemsModel, ChampionsModel, ChampionDpsCalculator, $scope){
		var championComparisonController = this;
		championComparisonController.getChampionLevel = ChampionComparisonModel.getChampionLevel;
		championComparisonController.setChampionLevel = ChampionComparisonModel.setChampionLevel;
		championComparisonController.firstChampionLevel = ChampionComparisonModel.getChampionLevel;
		championComparisonController.secondChampionLevel = ChampionComparisonModel.getChampionLevel;
		championComparisonController.timeframe = ChampionComparisonModel.timeframe;
		championComparisonController.test = ChampionDpsCalculator.test;
		championComparisonController.comparisonFilled = ChampionComparisonModel.comparisonFilled;
		championComparisonController.selectComparison = ChampionComparisonModel.selectComparison;
		championComparisonController.getComparisonItems = ChampionComparisonModel.getComparisonItems;
		championComparisonController.getComparisonItemClass = ChampionComparisonModel.getComparisonItemClass;
		championComparisonController.removeItem = ChampionComparisonModel.removeItem;
		championComparisonController.getName = ItemsModel.getItemName;
		championComparisonController.getDescription = ItemsModel.getItemDescription;
		championComparisonController.getSpriteStyle = ItemsModel.getItemSpriteStyle; 
		championComparisonController.getComparisonChampionByIndex = ChampionComparisonModel.getComparisonChampionByIndex;
		championComparisonController.getComparisonBackgroundStyle = ChampionComparisonModel.getComparisonBackgroundStyle;
		championComparisonController.getChampionSplash = ChampionsModel.getChampionSplash;
		championComparisonController.checkComparisonSelected = ChampionComparisonModel.shouldBeDimmed;
		championComparisonController.setTimeframe = ChampionComparisonModel.setTimeframe;
		championComparisonController.calculateDps = ChampionComparisonModel.calculateDpsInfo;
		championComparisonController.deselectChampion = ChampionComparisonModel.resetChampionComparison;
		ChampionComparisonModel.makeSureGraphsFilled();
		$scope.$on("$destroy", function(){
	        cleanup();
	    });

		function cleanup() {
			ChampionComparisonModel.removeChart(0);
			ChampionComparisonModel.removeChart(1);
		}
	}])

	.controller('ItemSelectorController', ['items', 'ItemsModel', 'ChampionComparisonModel', function itemSelectorController(items, ItemsModel, ChampionComparisonModel){
		var itemSelectorController = this;
		
		itemSelectorController.itemsData = items;
		itemSelectorController.getName = ItemsModel.getItemName;
		itemSelectorController.getDescription = ItemsModel.getItemDescription;
		itemSelectorController.getSpriteStyle = ItemsModel.getItemSpriteStyle;
		itemSelectorController.selectItem = function(item) {
			ItemsModel.getItem(ItemsModel.getItemId(item));
			ChampionComparisonModel.selectItem(item);
		}
	}])

	.controller('RuneSelectorController', [function runeSelectorController(){
		var runeSelectorController = this;
	}])

	.controller('MasterySelectorController', [function masterySelectorController(){
		var masterySelectorController = this;
	}])

	.controller('ChampionSelectorController', ['champions', 'ChampionsModel', 'ChampionComparisonModel', '$scope', function championSelectorController(champions, ChampionsModel, ChampionComparisonModel, $scope){
		var championSelectorController = this; 
		championSelectorController.championsData = champions;

		//TODO: consider moving these connections to a service and include the service in controller (standard interface anyone?)
		championSelectorController.checkSelected = ChampionComparisonModel.checkSelected;
		//championSelectorController.getComparisonOneItems = ChampionComparisonModel.getComparisonItems(0);
		championSelectorController.getImage = ChampionsModel.getChampionImage;
		championSelectorController.getName = ChampionsModel.getChampionName;
		championSelectorController.getTitle = ChampionsModel.getChampionTitle;
		championSelectorController.getSpriteStyle = ChampionsModel.getChampionSpriteStyle;

		// TODO: modify so selected champion is replaced without having to remove champion specifically
		championSelectorController.selectChampion = function(champion) {
			ChampionsModel.asyncGetDetailedChampionByName(ChampionsModel.getChampionCleanName(champion)).then(ChampionComparisonModel.championSelected(champion));
			// ChampionsModel.getChampion(ChampionsModel.getChampionCleanName(champion)).then(ChampionComparisonModel.championSelected(champion));
			// if (ChampionComparisonModel.comparisonFilled(0) && ChampionComparisonModel.comparisonFilled(1)) {
			// 	ChampionComparisonModel.removeCurrentSelectedComparison();	
			// }
		};

		// TODO: Move this code to a directive no reason to be in a controller!!
		var init = function() {
			var scrollRepeater = 0;
	    function mouseScrollHorizontally(e) {
        e = window.event || e;
        var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));
        scrollHorizontally(delta * 60);
        e.preventDefault();
	    }

	    function hoverScrollHorizontally(e) {
	    	e = window.event || e;
	    	var delta = parseInt(e.currentTarget.dataset.scrollModifier);
	    	var counter = 0;
	    	var rate = 50;
	    	scrollRepeater = setInterval( function() {
	    		counter += 1;
	    		if (counter > 275) {
	    			rate = 150;
	    		} else if (counter > 75) {
		    		rate += .5;
	    		} 
	    		var scrollAmount = delta * (rate / 100)
	    		scrollHorizontally(scrollAmount * 10);
	    	}, 10);
	    }

      function stopScrolling() {
        clearInterval(scrollRepeater);
	    }

	    function scrollHorizontally(step) {
	    	document.getElementById('championSelectorContainer').scrollLeft -= step;
	    }

	    // TODO: use event delegation instead of adding event handlers individually
	    if (document.getElementById('championSelectorContainer').addEventListener) {
        // IE9, Chrome, Safari, Opera
        document.getElementById('championSelectorContainer').addEventListener("mousewheel", mouseScrollHorizontally, false);
        document.getElementById('championScrollLeft').addEventListener('mouseenter', hoverScrollHorizontally, false);
        document.getElementById('championScrollLeft').addEventListener('mouseleave', stopScrolling, false);
        document.getElementById('championScrollRight').addEventListener('mouseenter', hoverScrollHorizontally, false);
        document.getElementById('championScrollRight').addEventListener('mouseleave', stopScrolling, false);
        // Firefox
        document.getElementById('championSelectorContainer').addEventListener("DOMMouseScroll", mouseScrollHorizontally, false);
	    } else {
        // IE 6/7/8
        document.getElementById('championSelectorContainer').attachEvent("onmousewheel", mouseScrollHorizontally);
	    }
			$scope.$on("$destroy", function(){
	        cleanup();
	    });
			
			function cleanup() {
		    stopScrolling();
		    if (document.getElementById('championSelectorContainer').removeEventListener) {
					document.getElementById('championSelectorContainer').removeEventListener("mousewheel", mouseScrollHorizontally);
	        document.getElementById('championScrollLeft').removeEventListener('mouseenter', hoverScrollHorizontally);
	        document.getElementById('championScrollLeft').removeEventListener('mouseleave', stopScrolling);
	        document.getElementById('championScrollRight').removeEventListener('mouseenter', hoverScrollHorizontally);
	        document.getElementById('championScrollRight').removeEventListener('mouseleave', stopScrolling);
	        // Firefox
	        document.getElementById('championSelectorContainer').removeEventListener("DOMMouseScroll", mouseScrollHorizontally);
		    } else {
		    	// IE 6/7/8
	        document.getElementById('championSelectorContainer').detachEvent("onmousewheel", mouseScrollHorizontally);
		    }
       
			}
		};

		init();
	}])
;



