/**
* myApp.models.championComparisons Module
*
* Description
*/
angular.module('models.championComparisons', ['services.championDpsCalculator'])
	.service('ChampionComparisonModel', ['ChampionDpsCalculator', function(championDpsCalculator){
		var model = this,
				comparisons = [
					{
						'champion': {'name': 'none'},
						'items': [undefined, undefined, undefined, undefined, undefined, undefined],
						'level': 1,
						'chart': undefined
					},
					{
						'champion': {'name': 'none'},
						'items': [undefined, undefined, undefined, undefined, undefined, undefined],
						'level': 1,
						'chart': undefined
					}],
					selectedComparison,
					calculateDpsTimer = undefined;
					
		setHighchartDefaults();

		model.timeframe = 1;
		model.championLevel = model.getChampionLevel;

		model.getChampionLevel = function(idx) {
			return comparisons[idx].level;
		};

		model.getTimeframe = function() {
			return model.timeframe;
		};

		model.setChampionLevel = function(comparisonIndex, level) {
			// console.log("level: " + level);
			// console.log("comparisonIndex: " + comparisonIndex);
			level = parseInt(level);
			comparisonIndex = parseInt(comparisonIndex);
			if(checkBounds(comparisonIndex, 0, 1) &&
				checkBounds(level, 1, 18) && 
				checkComparisonSelected(comparisonIndex)) 
			{
				level != selectedComparison.level ? inputsChanged() : null; // move to business logic
				comparisons[comparisonIndex].level = level;
			}
		};

		function checkBounds(input, min, max) {
			if (typeof(input) == 'number') {
				return (input <= max && input >= min);
			}
			return false;
		}



		function setHighchartDefaults() {
			Highcharts.setOptions({
			    chart: {
			        style: {
			            fontFamily: 'monospace',
			            color: "#f00"
			        }

			    },
			    title: {
			      style: {
			         color: '#F00',
			         font: 'bold 16px "Trebuchet MS", Verdana, sans-serif'
			      }
			   },
			    xAxis: {
			      tickColor: '#000',
			      labels: {
			         style: {
			            color: '#F00',
			            font: '11px Trebuchet MS, Verdana, sans-serif'
			         }
			      },
			      title: {
			         style: {
			            color: '#FFF',
			            fontWeight: 'bold',
			            fontSize: '12px',
			            fontFamily: 'Trebuchet MS, Verdana, sans-serif'

			         }            
			      }
			   },
			   yAxis: {
			      tickColor: '#000',
			      labels: {
			         style: {
			            color: '#F00',
			            font: '11px Trebuchet MS, Verdana, sans-serif'
			         }
			      },
			      title: {
			         style: {
			            color: '#FFF',
			            fontWeight: 'bold',
			            fontSize: '12px',
			            fontFamily: 'Trebuchet MS, Verdana, sans-serif'
			         }            
			      }
			   },
			});
		}

		model.setTimeframe = function(seconds) {
			// console.log("timeframe: " + seconds);
			seconds = parseInt(seconds);
			if (checkBounds(seconds, 1, 60)) {
				model.timeframe != seconds ? inputsChanged() : null; // move to business logic
				model.timeframe = seconds;
			}
		};

		// find better way to run necessary functions on page load
		model.makeSureGraphsFilled = function() {
			inputsChanged();
		};

		function inputsChanged() {
			typeof calculateDpsTimer == 'number' ? window.clearTimeout(calculateDpsTimer) : null;
			if ( model.comparisonFilled(0) && model.comparisonFilled(1) ) {
				calculateDpsTimer = window.setTimeout(model.calculateDpsInfo, 500);
			}
		};

		model.getComparisonChampionByIndex = function(idx) {
			if (typeof(idx) != 'undefined' && idx >=0 && idx <= 1) {
				return comparisons[idx].champion;
			}
		};

		model.getComparisonBackgroundStyle = function(backgroundUrl) {
			if (backgroundUrl) {
				return {
					"background-image": 'url("' + backgroundUrl +'")'
				};
			}
		};

		function checkComparisonSelected(idx) {
			if (typeof(idx) != 'undefined' && selectedComparison) {
				return comparisons[idx] == selectedComparison;
			} else {
				return false;
			}
		}

		model.shouldBeDimmed = function(idx) {
			if (checkComparisonSelected(idx)) {
				return false;
			} else {
				return model.comparisonFilled(idx);
			}
		};

		model.championSelected = function(champion) {
			if (champion) {
				var openComparisonIdx = findComparison( {'name' : 'none'} );
				var championComparisonIdx = findComparison(champion);
				if (typeof(championComparisonIdx) == 'undefined' &&
						typeof(openComparisonIdx) != 'undefined' ) {
					setComparisonChampion(openComparisonIdx, champion);
					setSelectedComparison(openComparisonIdx);
					model.comparisonFilled(0) && model.comparisonFilled(1) ? inputsChanged() : null;
				
				} else if (typeof(championComparisonIdx) != 'undefined') {
					model.resetChampionComparison(championComparisonIdx);
				}
			}
		};

		function handleComparisonsEmpty() {
			checkComparisonsEmpty() ? model.setTimeframe(1) : null;
		}

		function checkComparisonsEmpty() {
			return !(model.comparisonFilled(0) || model.comparisonFilled(1));
		}

		model.resetChampionComparison = function(idx) {
			comparisons[idx].champion = {'name': 'none'};
			comparisons[idx].items = [undefined, undefined, undefined, undefined, undefined, undefined];
			model.setChampionLevel(idx, 1);
			removeChart(idx);
			comparisons[idx].chart = undefined;
			setSelectedComparison(findFilledComparison());
			handleComparisonsEmpty();
		};

		function findFilledComparison(){
			if (model.comparisonFilled(0)) {
				return 0;
			} else if (model.comparisonFilled(1)) {
				return 1;
			} else {
				return undefined;
			}
		}

		function setComparisonChampion(idx, champion) {
			comparisons[idx].champion = champion;
		}

		model.selectComparison = function(idx) {
			if (typeof(idx) != 'undefined' && idx < 2 && idx >= 0 && comparisons[idx].champion.name != 'none') {
				setSelectedComparison(idx);
			} else {
				setSelectedComparison(findFilledComparison());
			}
		};

		model.removeCurrentSelectedComparison = function(){
			model.resetChampionComparison(findComparison(selectedComparison.champion));
		}

		function setSelectedComparison(idx) {
			if (typeof(idx) != 'undefined' && idx < 2 && idx >= 0) {
				// console.log("comparison set to " + idx);
				selectedComparison = comparisons[idx];
			} else {
				// console.log("comparison set to nothing!");
				selectedComparison = undefined;
			}
		}

		model.checkSelected = function(champion){
			if (champion) {
				return (typeof(findComparison(champion)) != 'undefined') ? true : false;
			}
		};

		model.comparisonFilled = function(idx) {
			return comparisons[idx].champion.name != 'none' ? true : false;
		};

		model.getComparisonItems = function(idx) {
			return comparisons[idx].items;
		};

		model.getComparisonItemClass = function(idx, item) {
			var className = ''
			var className2 = ''
			if (typeof(idx) != 'undefined') {
				className = 'itemPic' + idx;
			}
			if (!item) {
				className2 = ' itemPlaceholder'
			}
			return className + className2
		};

		model.selectItem = function(item){
			if (item && selectedComparison) {
				//test selection is a valid selection
				// checkItemAddable(item)

				//add item to comparison
				model.addItem(item);
			}
		};

		model.addItem = function(item) {
			var comparisonIdx = findComparison(selectedComparison.champion);
			if (typeof(comparisonIdx) != 'undefined') {
				var itemSlotToFill = itemsFillable(comparisons[comparisonIdx].items);
				if (typeof(itemSlotToFill) != 'undefined') {
					comparisons[comparisonIdx].items[itemSlotToFill] = item;
					inputsChanged();
				}
			}
		};

		model.removeItem = function(itemIdx, comparisonIdx){
			if (typeof(itemIdx) != 'undefined' && 
					typeof(comparisonIdx) != 'undefined' &&
					checkComparisonSelected(comparisonIdx)) 
			{
				delete comparisons[comparisonIdx].items[itemIdx];
				inputsChanged();
			}
		};

		function findComparison(champion) {
			if (comparisons[0].champion.name == champion.name) {
				return 0;
			} else if (comparisons[1].champion.name == champion.name) {
				return 1;
			} else {
				return undefined;
			}
		}

		function itemsFillable(items) {
			var idx = _.indexOf(items, undefined);
			return (idx != -1) ? idx : undefined;
		}

		model.calculateDpsInfo = function() {
			var dpsInfo = championDpsCalculator.getDpsInfo(
												[comparisons[0].champion, comparisons[1].champion],
												[comparisons[0].items, comparisons[1].items],
												[comparisons[0].level, comparisons[1].level],
												model.timeframe
										);
		

			// TODO use ng-highcharts
			// CAUSE OF A TYPEERROR BUG:
			//   when user clicks graph that has been added to view throws 
			//   Uncaught TypeError: a.target.className.indexOf is not a function

			// probably caused by the incorrect DOM manipulation within Angular
			// presume replacement of highchartsjs with ng-highcharts will resolve
			// the issue
			if (document.getElementById('champion0Chart')) {
				comparisons[0].chart = makeGraph('champion0Chart', dpsInfo.firstChampionEvents);
	    } else {
	    	// chart.series[0].setData(b);
	    };

			if (document.getElementById('champion1Chart')) {
				comparisons[1].chart = makeGraph('champion1Chart', dpsInfo.secondChampionEvents);
			}
		};

		function removeChart(idx) {
			if (comparisons[idx].chart) {
				comparisons[idx].chart.destroy();
			}
		}

		function makeGraph(containerName, data) {
			var chart = new Highcharts.Chart({
		    chart: {
		        renderTo: containerName,
		        height: 200,
		        backgroundColor:'rgba(0, 0, 0, .5)'
		    },

		    credits: {
		    	enabled: false
		    },

		    series: [{
		      data: data,
		      showInLegend: false
		    }],

		    tooltip: {
            useHTML: true,
		        formatter: function () {
		            return '<img class="graphAbilityIcon" src="' + 
		            this.point.image + 
		            '"></img><span class="graphAbilityName">' + 
		            this.point.name + 
		            '</span><br/><span class="graphAbilityDamage">Damage: ' + 
		            this.point.y + 
		            '</span>';
		        }
		    },

		    title: {
		    	text: 'Events'
		    },

		    xAxis: {
		    	tickPixelInterval: 50,
		    	title: {
		    		text: 'Time'
		    	}
		    },

		    yAxis: {
		    	tickPixelInterval: 50,
		    	title: {
		    		text: 'Damage'
		    	}
		    }
			});

			// allows the ng-click functionality of container to execute
			chart.container.onclick = null;
			chart.container.onmousedown = null;
			return chart;
		}

	}]);
