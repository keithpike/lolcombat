/**
* myApp.models.championComparisons Module
*
* Description
*/
angular.module('models.championComparisons', ['services.championDpsCalculator'])
	.service('ChampionComparisonModel', ['ChampionDpsCalculator', function(championDpsCalculator){
		var model = this,
				comparisons = [
					{
						'champion': {'name': 'none'},
						'items': [undefined, undefined, undefined, undefined, undefined, undefined],
						'level': 1,
					},
					{
						'champion': {'name': 'none'},
						'items': [undefined, undefined, undefined, undefined, undefined, undefined],
						'level': 1,
					}],
					selectedComparison,
					timeframe;
		setHighchartDefaults();

		function setHighchartDefaults(){
			Highcharts.setOptions({
			    chart: {
			        style: {
			            fontFamily: 'monospace',
			            color: "#f00"
			        }

			    },
			    title: {
			      style: {
			         color: '#F00',
			         font: 'bold 16px "Trebuchet MS", Verdana, sans-serif'
			      }
			   },
			    xAxis: {
			      tickColor: '#000',
			      labels: {
			         style: {
			            color: '#F00',
			            font: '11px Trebuchet MS, Verdana, sans-serif'
			         }
			      },
			      title: {
			         style: {
			            color: '#FFF',
			            fontWeight: 'bold',
			            fontSize: '12px',
			            fontFamily: 'Trebuchet MS, Verdana, sans-serif'

			         }            
			      }
			   },
			   yAxis: {
			      tickColor: '#000',
			      labels: {
			         style: {
			            color: '#F00',
			            font: '11px Trebuchet MS, Verdana, sans-serif'
			         }
			      },
			      title: {
			         style: {
			            color: '#FFF',
			            fontWeight: 'bold',
			            fontSize: '12px',
			            fontFamily: 'Trebuchet MS, Verdana, sans-serif'
			         }            
			      }
			   },
			});
		}


		model.getComparisonChampionByIndex = function(idx) {
			if (typeof(idx) != 'undefined' && idx >=0 && idx <= 1) {
				return comparisons[idx].champion;
			}
		};

		model.getComparisonBackgroundStyle = function(backgroundUrl) {
			if (backgroundUrl) {
				return {
					"background-image": 'url("' + backgroundUrl +'")'
				};
			}
		};

		function checkComparisonSelected(idx) {
			if (typeof(idx) != 'undefined' && selectedComparison) {
				return comparisons[idx] == selectedComparison;
			} else {
				return false;
			}
		}

		model.shouldBeDimmed = function(idx) {
			if (checkComparisonSelected(idx)) {
				return false;
			} else {
				return model.comparisonFilled(idx);
			}
		};

		model.championSelected = function(champion) {
			if (champion) {
				var openComparisonIdx = findComparison( {'name' : 'none'} );
				var championComparisonIdx = findComparison(champion);
				if (typeof(championComparisonIdx) == 'undefined' &&
						typeof(openComparisonIdx) != 'undefined' ) {
					setComparisonChampion(openComparisonIdx, champion);
					setSelectedComparison(openComparisonIdx);
				
				} else if (typeof(championComparisonIdx) != 'undefined') {
					model.resetChampionComparison(championComparisonIdx);
				}
			}
		};

		model.resetChampionComparison = function(idx) {

			comparisons[idx] = {
						'champion': {'name': 'none'},
						'items': [undefined, undefined, undefined, undefined, undefined, undefined],
						'level': 1,
					};
			setSelectedComparison(findFilledComparison());
		};

		function findFilledComparison(){
			if (model.comparisonFilled(0)) {
				return 0;
			} else if (model.comparisonFilled(1)) {
				return 1;
			} else {
				return undefined;
			}
		}

		function setComparisonChampion(idx, champion) {
			comparisons[idx].champion = champion;
		}

		model.selectComparison = function(idx) {
			if (typeof(idx) != 'undefined' && idx < 2 && idx >= 0 && comparisons[idx].champion.name != 'none') {
				setSelectedComparison(idx);
			} else {
				setSelectedComparison(findFilledComparison());
			}
		};

		model.removeCurrentSelectedComparison = function(){
			model.resetChampionComparison(findComparison(selectedComparison.champion));
		}

		function setSelectedComparison(idx) {
			if (typeof(idx) != 'undefined' && idx < 2 && idx >= 0) {
				console.log("comparison set to " + idx);
				selectedComparison = comparisons[idx];
			} else {
				// console.log("comparison set to nothing!");
				selectedComparison = undefined;
			}
		}

		model.checkSelected = function(champion){
			if (champion) {
				return (typeof(findComparison(champion)) != 'undefined') ? true : false;
			}
		};

		model.comparisonFilled = function(idx) {
			return comparisons[idx].champion.name != 'none' ? true : false;
		};

		model.getComparisonItems = function(idx) {
			return comparisons[idx].items;
		};

		model.getComparisonItemClass = function(idx, item) {
			var className = ''
			var className2 = ''
			if (typeof(idx) != 'undefined') {
				className = 'itemPic' + idx;
			}
			if (!item) {
				className2 = ' itemPlaceholder'
			}
			return className + className2
		};

		model.selectItem = function(item){
			if (item && selectedComparison) {
				//test selection is a valid selection
				// checkItemAddable(item)

				//add item to comparison
				model.addItem(item);
			}
		};

		model.addItem = function(item) {
			var comparisonIdx = findComparison(selectedComparison.champion);
			if (typeof(comparisonIdx) != 'undefined') {
				var itemSlotToFill = itemsFillable(comparisons[comparisonIdx].items);
				if (typeof(itemSlotToFill) != 'undefined') {
					comparisons[comparisonIdx].items[itemSlotToFill] = item;
				}
			}
		};

		model.removeItem = function(itemIdx, comparisonIdx){
			if (typeof(itemIdx) != 'undefined' && typeof(comparisonIdx) != 'undefined') {
				delete comparisons[comparisonIdx].items[itemIdx];
			}
		};

		function findComparison(champion) {
			if (comparisons[0].champion.name == champion.name) {
				return 0;
			} else if (comparisons[1].champion.name == champion.name) {
				return 1;
			} else {
				return undefined;
			}
		}

		function itemsFillable(items) {
			var idx = _.indexOf(items, undefined);
			return (idx != -1) ? idx : undefined;
		}

		model.calculateDpsInfo = function(timeframe) {
			// var dpsInfo = championDpsCalculator.getDpsInfo(
			// 									[comparisons[0].champion, comparisons[1].champion],
			// 									[comparisons[0].items, comparisons[1].items],
			// 									[comparisons[0].level, comparisons[1].level],
			// 									timeframe
			// 							);

			// TODO move this logic into directive, or use ng-highcharts
			if (document.getElementById('champion0Chart')) {
				makeGraph('champion0Chart', []);
			}

			if (document.getElementById('champion1Chart')) {
				makeGraph('champion1Chart', []);
			}

		};

		function makeGraph(containerName, data) {
			var chart = new Highcharts.Chart({
		    chart: {
		        renderTo: containerName,
		        height: 200,
		        backgroundColor:'rgba(0, 0, 0, .5)'
		    },

		    credits: {
		    	enabled: false
		    },

		    events: {
		    	click: function(){},
		    	selection: function(){}
		    },

		    series: [{
		      data: [
		      {
		      	y: 2000,
		      	x: .5,
		    	  image: 'https://s3-us-west-1.amazonaws.com/lolcomparitor/Images/spell/AutoAttack.png',
		        name: 'AutoAttack'
		      },
		      {
		      	y: 2000,
		      	x: 1.5,
		    	  image: 'https://s3-us-west-1.amazonaws.com/lolcomparitor/Images/spell/AutoAttack.png',
		        name: 'AutoAttack'
		      },
		      {
		      	y: 2000,
		      	x: 2,
		    	  image: 'https://s3-us-west-1.amazonaws.com/lolcomparitor/Images/spell/AutoAttack.png',
		        name: 'AutoAttack'
		      }],
		      showInLegend: false
		    }],

		    tooltip: {
            useHTML: true,
		        formatter: function () {
		            return '<img class="graphAbilityIcon" src="' + 
		            this.point.image + 
		            '"></img><span class="graphAbilityName">' + 
		            this.point.name + 
		            '</span><br/><span class="graphAbilityDamage">Damage: ' + 
		            this.point.y + 
		            '</span>';
		        }
		    },

		    title: {
		    	text: 'Events'
		    },

		    xAxis: {
		    	title: {
		    		text: 'Time'
		    	}
		    },

		    yAxis: {
		    	title: {
		    		text: 'Damage'
		    	}
		    }
			});
		}

	}]);
